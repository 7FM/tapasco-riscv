diff --git a/src/core/pipeline/scr1_ipic.sv b/src/core/pipeline/scr1_ipic.sv
index 312dc4c..0203f24 100644
--- a/src/core/pipeline/scr1_ipic.sv
+++ b/src/core/pipeline/scr1_ipic.sv
@@ -321,7 +321,9 @@ always_comb begin
                                  SCR1_IPIC_ICSR_LN_LSB]  = ipic_icsr.line;
             end
             default : begin
+`ifdef SCR1_TRGT_SIMULATION
                 ipic2csr_rdata_o = 'x;
+`endif
             end
         endcase
     end
@@ -348,11 +350,13 @@ always_comb begin
             SCR1_IPIC_IDX  : idxr_wr_req  = 1'b1;
             SCR1_IPIC_ICSR : icsr_wr_req  = 1'b1;
             default : begin // Illegal IPIC register address
+`ifdef SCR1_TRGT_SIMULATION
                 cicsr_wr_req = 'x;
                 eoi_wr_req   = 'x;
                 soi_wr_req   = 'x;
                 idxr_wr_req  = 'x;
                 icsr_wr_req  = 'x;
+`endif
             end
         endcase
     end
diff --git a/src/core/pipeline/scr1_pipe_hdu.sv b/src/core/pipeline/scr1_pipe_hdu.sv
index dbbc031..a9893ce 100644
--- a/src/core/pipeline/scr1_pipe_hdu.sv
+++ b/src/core/pipeline/scr1_pipe_hdu.sv
@@ -303,7 +303,9 @@ always_comb begin
                                                      : SCR1_HDU_DBGSTATE_DRUN;
             end
             default: begin
+`ifdef SCR1_TRGT_SIMULATION
                 dbg_state_next = SCR1_HDU_DBGSTATE_XXX;
+`endif
             end
         endcase
     end
@@ -361,9 +363,11 @@ always_comb begin
             end
 
             default : begin
+`ifdef SCR1_TRGT_SIMULATION
                 dfsm_trans_next  = 'X;
                 dfsm_update_next = 'X;
                 dfsm_event_next  = 'X;
+`endif
             end
         endcase
     end
@@ -391,7 +395,11 @@ always_comb begin
             SCR1_HDU_DBGSTATE_DHALTED: hart_cmd_req = (dfsm_update | dfsm_trans);
             SCR1_HDU_DBGSTATE_RUN,
             SCR1_HDU_DBGSTATE_DRUN   : hart_cmd_req = ~dfsm_update & dfsm_trans;
-            default                  : hart_cmd_req = 'X;        
+            default                  : begin
+`ifdef SCR1_TRGT_SIMULATION
+                                       hart_cmd_req = 'X;
+`endif
+            end
         endcase
     end
 end
@@ -638,9 +646,11 @@ always_comb begin : csr_if_regsel
             SCR1_HDU_DBGCSR_OFFS_DPC      : csr_dpc_sel       = 1'b1;
             SCR1_HDU_DBGCSR_OFFS_DSCRATCH0: csr_dscratch0_sel = 1'b1;
             default : begin
+`ifdef SCR1_TRGT_SIMULATION
                                             csr_dcsr_sel      = 1'bX;
                                             csr_dpc_sel       = 1'bX;
                                             csr_dscratch0_sel = 1'bX;
+`endif
             end
         endcase
     end
@@ -664,7 +674,11 @@ always_comb begin : csr_if_write
             SCR1_CSR_CMD_WRITE : csr_wr_data = csr2hdu_wdata_i;
             SCR1_CSR_CMD_SET   : csr_wr_data = csr_rd_data | csr2hdu_wdata_i;
             SCR1_CSR_CMD_CLEAR : csr_wr_data = csr_rd_data & (~csr2hdu_wdata_i);
-            default            : csr_wr_data = 'X;
+            default            : begin
+`ifdef SCR1_TRGT_SIMULATION
+                                 csr_wr_data = 'X;
+`endif
+            end
         endcase
     end
 end : csr_if_write
@@ -779,7 +793,9 @@ always_comb begin
         end
 
         default: begin
+`ifdef SCR1_TRGT_SIMULATION
             hdu2dm_cmd_resp_o  = 'X;
+`endif
         end
     endcase
 end
diff --git a/src/core/scr1_scu.sv b/src/core/scr1_scu.sv
index 7f44ee6..2cbcaa0 100644
--- a/src/core/scr1_scu.sv
+++ b/src/core/scr1_scu.sv
@@ -256,7 +256,11 @@ always_comb begin
             SCR1_SCU_SYSCTRL_ADDR_MODE   : scu_csr_rdata = scu_mode_ff;
             SCR1_SCU_SYSCTRL_ADDR_STATUS : scu_csr_rdata = scu_status_ff;
             SCR1_SCU_SYSCTRL_ADDR_STICKY : scu_csr_rdata = scu_sticky_sts_ff;
-            default                      : scu_csr_rdata = 'x;
+            default                      : begin
+`ifdef SCR1_TRGT_SIMULATION
+                scu_csr_rdata = 'x;
+`endif
+            end
         endcase
     end
 end
diff --git a/src/core/scr1_tapc.sv b/src/core/scr1_tapc.sv
index 9ba16b1..106e597 100644
--- a/src/core/scr1_tapc.sv
+++ b/src/core/scr1_tapc.sv
@@ -158,7 +158,11 @@ always_comb begin
         SCR1_TAP_STATE_IR_PAUSE   : tap_fsm_next = tapc_tms ? SCR1_TAP_STATE_IR_EXIT2     : SCR1_TAP_STATE_IR_PAUSE;
         SCR1_TAP_STATE_IR_EXIT2   : tap_fsm_next = tapc_tms ? SCR1_TAP_STATE_IR_UPDATE    : SCR1_TAP_STATE_IR_SHIFT;
         SCR1_TAP_STATE_IR_UPDATE  : tap_fsm_next = tapc_tms ? SCR1_TAP_STATE_DR_SEL_SCAN  : SCR1_TAP_STATE_IDLE;
-        default                   : tap_fsm_next = SCR1_TAP_STATE_XXX;
+        default                   : begin
+`ifdef SCR1_TRGT_SIMULATION
+                                    tap_fsm_next = SCR1_TAP_STATE_XXX;
+`endif
+        end
     endcase
 end
 
diff --git a/src/includes/scr1_ahb.svh b/src/includes/scr1_ahb.svh
index b81bb3a..efe2f13 100644
--- a/src/includes/scr1_ahb.svh
+++ b/src/includes/scr1_ahb.svh
@@ -13,17 +13,23 @@ parameter SCR1_AHB_WIDTH  = 32;
 // Encoding for HTRANS signal
 parameter logic [1:0] SCR1_HTRANS_IDLE   = 2'b00;
 parameter logic [1:0] SCR1_HTRANS_NONSEQ = 2'b10;
+`ifdef SCR1_TRGT_SIMULATION
 parameter logic [1:0] SCR1_HTRANS_ERR    = 'x;
+`endif
 
 // Encoding for HBURST signal
 parameter logic [2:0] SCR1_HBURST_SINGLE = 3'b000;
+`ifdef SCR1_TRGT_SIMULATION
 parameter logic [2:0] SCR1_HBURST_ERR    = 'x;
+`endif
 
 // Encoding for HSIZE signal
 parameter logic [2:0] SCR1_HSIZE_8B    = 3'b000;
 parameter logic [2:0] SCR1_HSIZE_16B   = 3'b001;
 parameter logic [2:0] SCR1_HSIZE_32B   = 3'b010;
+`ifdef SCR1_TRGT_SIMULATION
 parameter logic [2:0] SCR1_HSIZE_ERR   = 'x;
+`endif
 
 // Encoding HPROT signal
 // HPROT[0] : 0 - instr;      1 - data
@@ -38,6 +44,8 @@ parameter SCR1_HPROT_CACHE = 3;
 // Encoding HRESP signal
 parameter logic SCR1_HRESP_OKAY  = 1'b0;
 parameter logic SCR1_HRESP_ERROR = 1'b1;
+`ifdef SCR1_TRGT_SIMULATION
 parameter logic SCR1_HRESP_ERR   = 1'bx;
+`endif
 
 `endif // SCR1_AHB_SVH
diff --git a/src/includes/scr1_arch_types.svh b/src/includes/scr1_arch_types.svh
index 46fdf35..bb0171a 100644
--- a/src/includes/scr1_arch_types.svh
+++ b/src/includes/scr1_arch_types.svh
@@ -62,8 +62,10 @@ parameter bit [SCR1_EXC_CODE_WIDTH_E-1:0] SCR1_EXC_CODE_RESET               = 4'
 typedef enum logic [1:0] {
     SCR1_OP_WIDTH_BYTE  = 2'b00,
     SCR1_OP_WIDTH_HALF  = 2'b01,
-    SCR1_OP_WIDTH_WORD  = 2'b10,
-    SCR1_OP_WIDTH_ERROR = 'x
+    SCR1_OP_WIDTH_WORD  = 2'b10
+`ifdef SCR1_TRGT_SIMULATION
+    ,SCR1_OP_WIDTH_ERROR = 'x
+`endif
 } type_scr1_op_width_e;
 
 `endif //SCR1_ARCH_TYPES_SVH
diff --git a/src/includes/scr1_csr.svh b/src/includes/scr1_csr.svh
index 6feaf73..c37ee47 100644
--- a/src/includes/scr1_csr.svh
+++ b/src/includes/scr1_csr.svh
@@ -186,8 +186,10 @@ parameter bit [6:0] SCR1_CSR_ADDR_MHPMEVENT_MASK    = 7'b0011001;
 //-------------------------------------------------------------------------------
 typedef enum logic {
     SCR1_CSR_RESP_OK,
-    SCR1_CSR_RESP_ER,
-    SCR1_CSR_RESP_ERROR = 'x
+    SCR1_CSR_RESP_ER
+`ifdef SCR1_TRGT_SIMULATION
+    ,SCR1_CSR_RESP_ERROR = 'x
+`endif
 } type_scr1_csr_resp_e;
 
 `endif // SCR1_CSR_SVH
diff --git a/src/includes/scr1_hdu.svh b/src/includes/scr1_hdu.svh
index 72b87c6..14ea272 100644
--- a/src/includes/scr1_hdu.svh
+++ b/src/includes/scr1_hdu.svh
@@ -35,28 +35,36 @@ typedef enum logic [1:0] {
     SCR1_HDU_DBGSTATE_RESET         = 2'b00,
     SCR1_HDU_DBGSTATE_RUN           = 2'b01,
     SCR1_HDU_DBGSTATE_DHALTED       = 2'b10,
-    SCR1_HDU_DBGSTATE_DRUN          = 2'b11,
-    SCR1_HDU_DBGSTATE_XXX           = 'X
+    SCR1_HDU_DBGSTATE_DRUN          = 2'b11
+`ifdef SCR1_TRGT_SIMULATION
+    ,SCR1_HDU_DBGSTATE_XXX           = 'X
+`endif
 } type_scr1_hdu_dbgstates_e;
 
 typedef enum logic [1:0] {
     SCR1_HDU_PBUFSTATE_IDLE          = 2'b00,
     SCR1_HDU_PBUFSTATE_FETCH         = 2'b01,
     SCR1_HDU_PBUFSTATE_EXCINJECT     = 2'b10,
-    SCR1_HDU_PBUFSTATE_WAIT4END      = 2'b11,
-    SCR1_HDU_PBUFSTATE_XXX           = 'X
+    SCR1_HDU_PBUFSTATE_WAIT4END      = 2'b11
+`ifdef SCR1_TRGT_SIMULATION
+    ,SCR1_HDU_PBUFSTATE_XXX           = 'X
+`endif
 } type_scr1_hdu_pbufstates_e;
 
 typedef enum logic {
     SCR1_HDU_HARTCMD_RESUME         = 1'b0,
-    SCR1_HDU_HARTCMD_HALT           = 1'b1,
-    SCR1_HDU_HARTCMD_XXX            = 1'bX
+    SCR1_HDU_HARTCMD_HALT           = 1'b1
+`ifdef SCR1_TRGT_SIMULATION
+    ,SCR1_HDU_HARTCMD_XXX            = 1'bX
+`endif
 } type_scr1_hdu_hart_command_e;
 
 typedef enum logic {
     SCR1_HDU_FETCH_SRC_NORMAL       = 1'b0,
-    SCR1_HDU_FETCH_SRC_PBUF         = 1'b1,
-    SCR1_HDU_FETCH_SRC_XXX          = 1'bX
+    SCR1_HDU_FETCH_SRC_PBUF         = 1'b1
+`ifdef SCR1_TRGT_SIMULATION
+    ,SCR1_HDU_FETCH_SRC_XXX          = 1'bX
+`endif
 } type_scr1_hdu_fetch_src_e;
 
 typedef struct packed {
@@ -87,8 +95,10 @@ typedef enum logic [2:0] {
     SCR1_HDU_HALTCAUSE_TMREQ        = 3'b010,
     SCR1_HDU_HALTCAUSE_DMREQ        = 3'b011,
     SCR1_HDU_HALTCAUSE_SSTEP        = 3'b100,
-    SCR1_HDU_HALTCAUSE_RSTEXIT      = 3'b101,
-    SCR1_HDU_HALTCAUSE_XXX          = 'X
+    SCR1_HDU_HALTCAUSE_RSTEXIT      = 3'b101
+`ifdef SCR1_TRGT_SIMULATION
+    ,SCR1_HDU_HALTCAUSE_XXX          = 'X
+`endif
 } type_scr1_hdu_haltcause_e;
 
 typedef struct packed {
diff --git a/src/includes/scr1_ipic.svh b/src/includes/scr1_ipic.svh
index 2954bfd..2a550be 100644
--- a/src/includes/scr1_ipic.svh
+++ b/src/includes/scr1_ipic.svh
@@ -47,8 +47,10 @@ parameter   logic [1:0]                     SCR1_IPIC_PRV_M         = 2'b11;
 //-------------------------------------------------------------------------------
 typedef enum logic {
     SCR1_CSR2IPIC_RD,
-    SCR1_CSR2IPIC_WR,
-    SCR1_CSR2IPIC_ERROR = 'x
+    SCR1_CSR2IPIC_WR
+`ifdef SCR1_TRGT_SIMULATION
+    ,SCR1_CSR2IPIC_ERROR = 'x
+`endif
 } type_scr1_csr2ipic_wr_e;
 
 `endif // SCR1_IPIC_EN
diff --git a/src/includes/scr1_memif.svh b/src/includes/scr1_memif.svh
index 3782840..c762f9b 100644
--- a/src/includes/scr1_memif.svh
+++ b/src/includes/scr1_memif.svh
@@ -13,8 +13,10 @@
 //-------------------------------------------------------------------------------
 typedef enum logic {
     SCR1_MEM_CMD_RD     = 1'b0,
-    SCR1_MEM_CMD_WR     = 1'b1,
-    SCR1_MEM_CMD_ERROR  = 'x
+    SCR1_MEM_CMD_WR     = 1'b1
+`ifdef SCR1_TRGT_SIMULATION
+    ,SCR1_MEM_CMD_ERROR  = 'x
+`endif
 } type_scr1_mem_cmd_e;
 
 //-------------------------------------------------------------------------------
@@ -23,8 +25,10 @@ typedef enum logic {
 typedef enum logic[1:0] {
     SCR1_MEM_WIDTH_BYTE     = 2'b00,
     SCR1_MEM_WIDTH_HWORD    = 2'b01,
-    SCR1_MEM_WIDTH_WORD     = 2'b10,
-    SCR1_MEM_WIDTH_ERROR    = 'x
+    SCR1_MEM_WIDTH_WORD     = 2'b10
+`ifdef SCR1_TRGT_SIMULATION
+    ,SCR1_MEM_WIDTH_ERROR    = 'x
+`endif
 } type_scr1_mem_width_e;
 
 //-------------------------------------------------------------------------------
@@ -33,8 +37,10 @@ typedef enum logic[1:0] {
 typedef enum logic[1:0] {
     SCR1_MEM_RESP_NOTRDY    = 2'b00,
     SCR1_MEM_RESP_RDY_OK    = 2'b01,
-    SCR1_MEM_RESP_RDY_ER    = 2'b10,
-    SCR1_MEM_RESP_ERROR     = 'x
+    SCR1_MEM_RESP_RDY_ER    = 2'b10
+`ifdef SCR1_TRGT_SIMULATION
+    ,SCR1_MEM_RESP_ERROR     = 'x
+`endif
 } type_scr1_mem_resp_e;
 
 `endif // SCR1_MEMIF_SVH
diff --git a/src/includes/scr1_riscv_isa_decoding.svh b/src/includes/scr1_riscv_isa_decoding.svh
index c7eb484..b10b3bf 100644
--- a/src/includes/scr1_riscv_isa_decoding.svh
+++ b/src/includes/scr1_riscv_isa_decoding.svh
@@ -92,8 +92,10 @@ localparam SCR1_SUM2_OP_ALL_NUM_E    = 2;
 localparam SCR1_SUM2_OP_WIDTH_E      = $clog2(SCR1_SUM2_OP_ALL_NUM_E);
 typedef enum logic [SCR1_SUM2_OP_WIDTH_E-1:0] {
     SCR1_SUM2_OP_PC_IMM,            // op1 = curr_pc; op2 = imm (AUIPC, target new_pc for JAL and branches)
-    SCR1_SUM2_OP_REG_IMM,           // op1 = rs1; op2 = imm (target new_pc for JALR, LOAD/STORE address)
-    SCR1_SUM2_OP_ERROR = 'x
+    SCR1_SUM2_OP_REG_IMM            // op1 = rs1; op2 = imm (target new_pc for JALR, LOAD/STORE address)
+`ifdef SCR1_TRGT_SIMULATION
+    ,SCR1_SUM2_OP_ERROR = 'x
+`endif
 } type_scr1_ialu_sum2_op_sel_e;
 
 //-------------------------------------------------------------------------------
diff --git a/src/includes/scr1_scu.svh b/src/includes/scr1_scu.svh
index e0d5169..365700f 100644
--- a/src/includes/scr1_scu.svh
+++ b/src/includes/scr1_scu.svh
@@ -24,16 +24,20 @@ typedef enum logic [SCR1_SCU_DR_SYSCTRL_OP_WIDTH-1:0] {
     SCR1_SCU_SYSCTRL_OP_WRITE       = 2'h0,
     SCR1_SCU_SYSCTRL_OP_READ        = 2'h1,
     SCR1_SCU_SYSCTRL_OP_SETBITS     = 2'h2,
-    SCR1_SCU_SYSCTRL_OP_CLRBITS     = 2'h3,
-    SCR1_SCU_SYSCTRL_OP_XXX         = 'X
+    SCR1_SCU_SYSCTRL_OP_CLRBITS     = 2'h3
+`ifdef SCR1_TRGT_SIMULATION
+    ,SCR1_SCU_SYSCTRL_OP_XXX         = 'X
+`endif
 } type_scr1_scu_sysctrl_op_e;
 
 typedef enum logic [SCR1_SCU_DR_SYSCTRL_ADDR_WIDTH-1:0] {
     SCR1_SCU_SYSCTRL_ADDR_CONTROL   = 2'h0,
     SCR1_SCU_SYSCTRL_ADDR_MODE      = 2'h1,
     SCR1_SCU_SYSCTRL_ADDR_STATUS    = 2'h2,
-    SCR1_SCU_SYSCTRL_ADDR_STICKY    = 2'h3,
-    SCR1_SCU_SYSCTRL_ADDR_XXX       = 'X
+    SCR1_SCU_SYSCTRL_ADDR_STICKY    = 2'h3
+`ifdef SCR1_TRGT_SIMULATION
+    ,SCR1_SCU_SYSCTRL_ADDR_XXX       = 'X
+`endif
 } type_scr1_scu_sysctrl_addr_e;
 
 typedef struct packed {
diff --git a/src/includes/scr1_tapc.svh b/src/includes/scr1_tapc.svh
index 6353b9a..de8a6c6 100644
--- a/src/includes/scr1_tapc.svh
+++ b/src/includes/scr1_tapc.svh
@@ -40,8 +40,10 @@ typedef enum logic [SCR1_TAP_STATE_WIDTH-1:0] {
     SCR1_TAP_STATE_IR_EXIT1,
     SCR1_TAP_STATE_IR_PAUSE,
     SCR1_TAP_STATE_IR_EXIT2,
-    SCR1_TAP_STATE_IR_UPDATE,
-    SCR1_TAP_STATE_XXX       = 'X
+    SCR1_TAP_STATE_IR_UPDATE
+`ifdef SCR1_TRGT_SIMULATION
+    ,SCR1_TAP_STATE_XXX       = 'X
+`endif
 } type_scr1_tap_state_e;
 
 typedef enum logic [SCR1_TAP_INSTRUCTION_WIDTH - 1:0] {
@@ -52,8 +54,10 @@ typedef enum logic [SCR1_TAP_INSTRUCTION_WIDTH - 1:0] {
     SCR1_TAP_INSTR_DTMCS             = 5'h10,
     SCR1_TAP_INSTR_DMI_ACCESS        = 5'h11,
 
-    SCR1_TAP_INSTR_BYPASS            = 5'h1F,
-    SCR1_TAP_INSTR_XXX               = 'X
+    SCR1_TAP_INSTR_BYPASS            = 5'h1F
+`ifdef SCR1_TRGT_SIMULATION
+    ,SCR1_TAP_INSTR_XXX               = 'X
+`endif
 } type_scr1_tap_instr_e;
 
 `endif // SCR1_DBG_EN
diff --git a/src/top/scr1_dmem_ahb.sv b/src/top/scr1_dmem_ahb.sv
index b62c3b5..41d2b6e 100644
--- a/src/top/scr1_dmem_ahb.sv
+++ b/src/top/scr1_dmem_ahb.sv
@@ -49,8 +49,10 @@ localparam  SCR1_FIFO_CNT_WIDTH = $clog2(SCR1_FIFO_WIDTH+1);
 //-------------------------------------------------------------------------------
 typedef enum logic {
     SCR1_FSM_ADDR = 1'b0,
-    SCR1_FSM_DATA = 1'b1,
-    SCR1_FSM_ERR  = 1'bx
+    SCR1_FSM_DATA = 1'b1
+`ifdef SCR1_TRGT_SIMULATION
+    ,SCR1_FSM_ERR  = 1'bx
+`endif
 } type_scr1_fsm_e;
 
 typedef struct packed {
@@ -93,7 +95,9 @@ begin
             tmp = SCR1_HSIZE_32B;
         end
         default : begin
+`ifdef SCR1_TRGT_SIMULATION
             tmp = SCR1_HSIZE_ERR;
+`endif
         end
     endcase
     return tmp;
@@ -107,7 +111,11 @@ function automatic logic[SCR1_AHB_WIDTH-1:0] scr1_conv_mem2ahb_wdata (
 );
     logic   [SCR1_AHB_WIDTH-1:0]  tmp;
 begin
+`ifdef SCR1_TRGT_SIMULATION
     tmp = 'x;
+`else
+    tmp = SCR1_AHB_WIDTH'd0;
+`endif
     case (dmem_width)
         SCR1_MEM_WIDTH_BYTE : begin
             case (dmem_addr)
@@ -156,7 +164,11 @@ function automatic logic[SCR1_AHB_WIDTH-1:0] scr1_conv_ahb2mem_rdata (
 );
     logic   [SCR1_AHB_WIDTH-1:0]  tmp;
 begin
+`ifdef SCR1_TRGT_SIMULATION
     tmp = 'x;
+`else
+    tmp = SCR1_AHB_WIDTH'd0;
+`endif
     case (hwidth)
         SCR1_HSIZE_8B : begin
             case (haddr)
@@ -280,8 +292,10 @@ always_comb begin
             req_fifo_new[0] = req_fifo_new[1];
             req_fifo_new[1].hwrite = 1'b0;
             req_fifo_new[1].hwidth = SCR1_HSIZE_32B;
+`ifdef SCR1_TRGT_SIMULATION
             req_fifo_new[1].haddr  = 'x;
             req_fifo_new[1].hwdata = 'x;
+`endif
             req_fifo_cnt_new = req_fifo_cnt - 1'b1;
         end
         2'b11 : begin
@@ -293,9 +307,11 @@ always_comb begin
             req_fifo_new[0].hwdata = scr1_conv_mem2ahb_wdata(dmem_addr[1:0], dmem_width, dmem_wdata);
         end
         default : begin
+`ifdef SCR1_TRGT_SIMULATION
             req_fifo_up      = 'x;
             req_fifo_cnt_new = 'x;
             req_fifo_new     = 'x;
+`endif
         end
     endcase
 end
@@ -341,7 +357,9 @@ always_ff @(negedge rst_n, posedge clk) begin
                 end
             end
             default : begin
+`ifdef SCR1_TRGT_SIMULATION
                 fsm <= SCR1_FSM_ERR;
+`endif
             end
         endcase
     end
@@ -361,7 +379,9 @@ always_comb begin
             end
         end
         default : begin
+`ifdef SCR1_TRGT_SIMULATION
             req_fifo_rd = 1'bx;
+`endif
         end
     endcase
 end
@@ -454,7 +474,9 @@ always_comb begin
             end
         end
         default : begin
+`ifdef SCR1_TRGT_SIMULATION
             htrans = SCR1_HTRANS_ERR;
+`endif
         end
     endcase
 end
diff --git a/src/top/scr1_dmem_router.sv b/src/top/scr1_dmem_router.sv
index c240c3e..465fa5d 100644
--- a/src/top/scr1_dmem_router.sv
+++ b/src/top/scr1_dmem_router.sv
@@ -189,10 +189,17 @@ always_comb begin
     endcase
 end
 
+`ifdef SCR1_TRGT_SIMULATION
 assign port0_cmd    = (port_sel == SCR1_SEL_PORT0) ? dmem_cmd   : SCR1_MEM_CMD_ERROR;
 assign port0_width  = (port_sel == SCR1_SEL_PORT0) ? dmem_width : SCR1_MEM_WIDTH_ERROR;
 assign port0_addr   = (port_sel == SCR1_SEL_PORT0) ? dmem_addr  : 'x;
 assign port0_wdata  = (port_sel == SCR1_SEL_PORT0) ? dmem_wdata : 'x;
+`else
+assign port0_cmd    = dmem_cmd;
+assign port0_width  = dmem_width;
+assign port0_addr   = dmem_addr;
+assign port0_wdata  = dmem_wdata;
+`endif
 
 //-------------------------------------------------------------------------------
 // Interface to PORT1
@@ -213,10 +220,17 @@ always_comb begin
     endcase
 end
 
+`ifdef SCR1_TRGT_SIMULATION
 assign port1_cmd    = (port_sel == SCR1_SEL_PORT1) ? dmem_cmd   : SCR1_MEM_CMD_ERROR;
 assign port1_width  = (port_sel == SCR1_SEL_PORT1) ? dmem_width : SCR1_MEM_WIDTH_ERROR;
 assign port1_addr   = (port_sel == SCR1_SEL_PORT1) ? dmem_addr  : 'x;
 assign port1_wdata  = (port_sel == SCR1_SEL_PORT1) ? dmem_wdata : 'x;
+`else
+assign port1_cmd    = dmem_cmd;
+assign port1_width  = dmem_width;
+assign port1_addr   = dmem_addr;
+assign port1_wdata  = dmem_wdata;
+`endif
 
 //-------------------------------------------------------------------------------
 // Interface to PORT2
@@ -237,10 +251,17 @@ always_comb begin
     endcase
 end
 
+`ifdef SCR1_TRGT_SIMULATION
 assign port2_cmd    = (port_sel == SCR1_SEL_PORT2) ? dmem_cmd   : SCR1_MEM_CMD_ERROR;
 assign port2_width  = (port_sel == SCR1_SEL_PORT2) ? dmem_width : SCR1_MEM_WIDTH_ERROR;
 assign port2_addr   = (port_sel == SCR1_SEL_PORT2) ? dmem_addr  : 'x;
 assign port2_wdata  = (port_sel == SCR1_SEL_PORT2) ? dmem_wdata : 'x;
+`else
+assign port2_cmd    = dmem_cmd;
+assign port2_width  = dmem_width;
+assign port2_addr   = dmem_addr;
+assign port2_wdata  = dmem_wdata;
+`endif
 
 `ifdef SCR1_TRGT_SIMULATION
 //-------------------------------------------------------------------------------
diff --git a/src/top/scr1_imem_ahb.sv b/src/top/scr1_imem_ahb.sv
index c306380..9898ebc 100644
--- a/src/top/scr1_imem_ahb.sv
+++ b/src/top/scr1_imem_ahb.sv
@@ -44,8 +44,10 @@ localparam  SCR1_FIFO_CNT_WIDTH = $clog2(SCR1_FIFO_WIDTH+1);
 //-------------------------------------------------------------------------------
 typedef enum logic {
     SCR1_FSM_ADDR = 1'b0,
-    SCR1_FSM_DATA = 1'b1,
-    SCR1_FSM_ERR  = 1'bx
+    SCR1_FSM_DATA = 1'b1
+`ifdef SCR1_TRGT_SIMULATION
+    ,SCR1_FSM_ERR  = 1'bx
+`endif
 } type_scr1_fsm_e;
 
 typedef struct packed {
@@ -138,7 +140,9 @@ always_comb begin
             // FIFO read
             req_fifo_up     = 1'b1;
             req_fifo_new[0] = req_fifo_new[1];
+`ifdef SCR1_TRGT_SIMULATION
             req_fifo_new[1].haddr  = 'x;
+`endif
             req_fifo_cnt_new = req_fifo_cnt - 1'b1;
         end
         2'b11 : begin
@@ -147,9 +151,11 @@ always_comb begin
             req_fifo_new[0].haddr = imem_addr;
         end
         default : begin
+`ifdef SCR1_TRGT_SIMULATION
             req_fifo_up      = 'x;
             req_fifo_cnt_new = 'x;
             req_fifo_new     = 'x;
+`endif
         end
     endcase
 end
@@ -196,7 +202,9 @@ always_ff @(negedge rst_n, posedge clk) begin
                 end
             end
             default : begin
+`ifdef SCR1_TRGT_SIMULATION
                 fsm <= SCR1_FSM_ERR;
+`endif
             end
         endcase
     end
@@ -216,7 +224,9 @@ always_comb begin
             end
         end
         default : begin
+`ifdef SCR1_TRGT_SIMULATION
             req_fifo_rd = 1'bx;
+`endif
         end
     endcase
 end
@@ -275,7 +285,9 @@ always_comb begin
             end
         end
         default : begin
+`ifdef SCR1_TRGT_SIMULATION
             htrans = SCR1_HTRANS_ERR;
+`endif
         end
     endcase
 end
diff --git a/src/top/scr1_imem_router.sv b/src/top/scr1_imem_router.sv
index 1fe285d..17bac3d 100644
--- a/src/top/scr1_imem_router.sv
+++ b/src/top/scr1_imem_router.sv
@@ -135,8 +135,13 @@ always_comb begin
     endcase
 end
 
+`ifdef SCR1_TRGT_SIMULATION
 assign port0_cmd   = (~port_sel) ? imem_cmd  : SCR1_MEM_CMD_ERROR;
 assign port0_addr  = (~port_sel) ? imem_addr : 'x;
+`else
+assign port0_cmd   = imem_cmd;
+assign port0_addr  = imem_addr;
+`endif
 
 //-------------------------------------------------------------------------------
 // Interface to PORT1
@@ -157,8 +162,13 @@ always_comb begin
     endcase
 end
 
+`ifdef SCR1_TRGT_SIMULATION
 assign port1_cmd   = (port_sel) ? imem_cmd  : SCR1_MEM_CMD_ERROR;
 assign port1_addr  = (port_sel) ? imem_addr : 'x;
+`else
+assign port1_cmd   = imem_cmd;
+assign port1_addr  = imem_addr;
+`endif
 
 `ifdef SCR1_TRGT_SIMULATION
 //-------------------------------------------------------------------------------
diff --git a/src/top/scr1_mem_axi.sv b/src/top/scr1_mem_axi.sv
index 406494d..7d3a184 100644
--- a/src/top/scr1_mem_axi.sv
+++ b/src/top/scr1_mem_axi.sv
@@ -87,7 +87,11 @@ begin
         SCR1_MEM_WIDTH_BYTE :  axsize = 3'b000;
         SCR1_MEM_WIDTH_HWORD:  axsize = 3'b001;
         SCR1_MEM_WIDTH_WORD :  axsize = 3'b010;
-                     default:  axsize = 'x;
+                     default:  begin
+`ifdef SCR1_TRGT_SIMULATION
+                               axsize = 'x;
+`endif
+                     end
     endcase
 
     return axsize;
@@ -269,14 +273,22 @@ always_comb begin
             SCR1_MEM_WIDTH_BYTE :  wstrb = 4'h1 << core_addr[1:0];
             SCR1_MEM_WIDTH_HWORD:  wstrb = 4'h3 << core_addr[1:0];
             SCR1_MEM_WIDTH_WORD :  wstrb = 4'hf << core_addr[1:0];
-                         default:  wstrb = 'x;
+                         default: begin
+`ifdef SCR1_TRGT_SIMULATION
+                                   wstrb = 'x;
+`endif
+                         end
         endcase
     else
         case (req_fifo[req_proc_ptr].axi_width)
             SCR1_MEM_WIDTH_BYTE :  wstrb = 4'h1 << req_fifo[req_proc_ptr].axi_addr[1:0];
             SCR1_MEM_WIDTH_HWORD:  wstrb = 4'h3 << req_fifo[req_proc_ptr].axi_addr[1:0];
             SCR1_MEM_WIDTH_WORD :  wstrb = 4'hf << req_fifo[req_proc_ptr].axi_addr[1:0];
-                         default:  wstrb = 'x;
+                         default: begin
+`ifdef SCR1_TRGT_SIMULATION
+                                   wstrb = 'x;
+`endif
+                         end
         endcase
 end
 
@@ -292,7 +304,11 @@ always_comb begin
         SCR1_MEM_WIDTH_BYTE :  rcvd_rdata = rdata >> (8*req_fifo[req_done_ptr].axi_addr[1:0]);
         SCR1_MEM_WIDTH_HWORD:  rcvd_rdata = rdata >> (8*req_fifo[req_done_ptr].axi_addr[1:0]);
         SCR1_MEM_WIDTH_WORD :  rcvd_rdata = rdata >> (8*req_fifo[req_done_ptr].axi_addr[1:0]);
-                     default:  rcvd_rdata = 'x;
+                     default: begin
+`ifdef SCR1_TRGT_SIMULATION
+                               rcvd_rdata = 'x;
+`endif
+                     end
     endcase
 end
 
